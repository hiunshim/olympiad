#!/usr/bin/env python
import os
import sys
from io import BytesIO, IOBase
from math import gcd
from collections import defaultdict

def calc(n):
    if n == 0:
        return 0
    cnt = 0
    if n == (10 ** 12):
        n -= 1
        cnt += 1
    nL = []
    while n:
        nL.append(n % 10)
        n //= 10
    nL.reverse()
    def joiner(a,b,c,d):
        return a << 22 | b << 12 | c << 1 | d
    def splitter(x):
        a = x >> 22
        x ^= (a << 22)
        b = x >> 12
        x ^= (b << 12)
        c = x >> 1
        x ^= c << 1
        return a,b,c,x
    for summ in range(1, len(nL) * 9 + 1):
        dp = defaultdict(int)
        dp[joiner(summ, summ, 0, 0)] = 1
        for i in range(len(nL)):
            newdp = defaultdict(int)
            for elem2 in dp:
                for j in range(10):
                    elem = splitter(elem2)
                    if elem[2] == 0 and j > nL[i]:
                        continue
                    nextElem = (elem[0] - j, elem[1] // gcd(elem[1], j) if j != 0 or elem[3] else elem[1], elem[2] or j < nL[i], elem[3] or j != 0)
                    if nextElem[0] < 0 or nextElem[0] > 9 * (len(nL) - i - 1):
                        continue
                    newdp[joiner(*nextElem)] += dp[elem2]
            dp = newdp
        for elem2 in dp:
            elem = splitter(elem2)
            if elem[0] == 0 and elem[1] == 1:
                cnt += dp[elem2]
    return cnt

def main():
    for t in range(int(input())):
        a,b = map(int,input().split())
        print(f"Case #{t + 1}: {calc(b) - calc(a - 1)}")


# region fastio

BUFSIZE = 8192


class FastIO(IOBase):
    newlines = 0

    def __init__(self, file):
        self._file = file
        self._fd = file.fileno()
        self.buffer = BytesIO()
        self.writable = "x" in file.mode or "r" not in file.mode
        self.write = self.buffer.write if self.writable else None

    def read(self):
        while True:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            if not b:
                break
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines = 0
        return self.buffer.read()

    def readline(self):
        while self.newlines == 0:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            self.newlines = b.count(b"\n") + (not b)
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines -= 1
        return self.buffer.readline()

    def flush(self):
        if self.writable:
            os.write(self._fd, self.buffer.getvalue())
            self.buffer.truncate(0), self.buffer.seek(0)


class IOWrapper(IOBase):
    def __init__(self, file):
        self.buffer = FastIO(file)
        self.flush = self.buffer.flush
        self.writable = self.buffer.writable
        self.write = lambda s: self.buffer.write(s.encode("ascii"))
        self.read = lambda: self.buffer.read().decode("ascii")
        self.readline = lambda: self.buffer.readline().decode("ascii")


sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)
input = lambda: sys.stdin.readline().rstrip("\r\n")

# endregion

if __name__ == "__main__":
    main()